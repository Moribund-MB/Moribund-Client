package com.github.moribund.objects.playable.players;

import com.badlogic.gdx.InputProcessor;
import com.github.moribund.graphics.animations.Animation;
import com.github.moribund.graphics.drawables.DrawableGameAsset;
import com.github.moribund.objects.attributes.Collidable;
import com.github.moribund.objects.attributes.Flaggable;
import com.github.moribund.objects.attributes.Movable;
import com.github.moribund.objects.nonplayable.projectile.ProjectileType;
import com.github.moribund.objects.playable.players.containers.ItemContainer;
import com.github.moribund.objects.playable.players.ui.Timer;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;

/**
 * The {@code PlayableCharacter} interface is a template
 * for a character that can be interacted with by keys. All
 * playable characters are assumed as visible, movable, and
 * an input processor.
 */
public interface PlayableCharacter extends Collidable, Flaggable, DrawableGameAsset, Movable, InputProcessor {

    /**
     * Gets the player's unique ID generated by the connection.
     * @return The Player's unique ID.
     */
    int getPlayerId();

    /**
     * Gets the ID of the game the player is in
     * @return The ID of the game the player is in.
     */
    int getGameId();

    /**
     * Binds the keys to the {@code keyBinds} using the
     * {@link com.badlogic.gdx.Input.Keys} constants to delegate
     * {@link Runnable} actions.
     */
    void bindKeys();

    /**
     * Gets the respective {@link PlayerAction} for the
     * {@link com.badlogic.gdx.Input.Keys} value pressed.
     * @return The key binds defined by {@link PlayableCharacter#bindKeys()}.
     */
    Int2ObjectMap<PlayerAction> getKeyBinds();

    /**
     * Handles the key being pressed by a player after it has gone through
     * client-server latency.
     * @param keyPressed The {@link com.badlogic.gdx.Input.Keys} value that was
     *                   pressed.
     */
    void keyPressed(int keyPressed);

    /**
     * Handles the key being lifted by a player after it has gone through
     * client-server latency.
     * @param keyUnpressed The {@link com.badlogic.gdx.Input.Keys} value that
     *                     was lifted.
     */
    void keyUnpressed(int keyUnpressed);

    /**
     * Gets the player's inventory.
     * @return The player's inventory.
     */
    ItemContainer getInventory();

    /**
     * Gets the player's equipment.
     * @return The player's equipment.
     */
    ItemContainer getEquipment();

    /**
     * Gets the current hitpoints of the player.
     * @return The current hitpoints of the player.
     */
    int getHitpoints();

    /**
     * Sets the current hitpoints of the player.
     * @param hitpoints The current hitpoints of the player.
     */
    void setHitpoints(int hitpoints);

    /**
     * Gets the maximum amount of hitpoints of the player.
     * @return The maximum amount of hitpoints of the player.
     */
    int getMaxHitpoints();

    /**
     * Updates the appearance of the player.
     */
    void updateAppearance();

    /**
     * Animates an {@link Animation}, the launches a {@link com.github.moribund.objects.nonplayable.projectile.Projectile}
     * at a given speed.
     */
    void animateThenLaunch(Animation animation, ProjectileType projectile, int movementSpeed);

    /**
     * Gets the timer for death.
     * @return The timer for death.
     */
    Timer getDeathTimer();

    /**
     * Gets the timer for the lobby.
     * @return The timer for the lobby.
     */
    Timer getLobbyTimer();

    /**
     * Gets the player's username
     * @return The player's username.
     */
    String getUsername();
}