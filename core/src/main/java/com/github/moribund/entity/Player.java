package com.github.moribund.entity;

import com.badlogic.gdx.Input;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.github.moribund.MoribundClient;
import com.github.moribund.images.SpriteFile;
import com.github.moribund.net.packets.KeyPressedPacket;
import com.github.moribund.net.packets.KeyUnpressedPacket;
import com.github.moribund.net.packets.TilePacket;
import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import lombok.val;

import java.util.HashSet;
import java.util.Set;

/**
 * The {@code Player} that is being controlled by a client.
 */
public class Player implements PlayableCharacter, InputProcessor {
    /**
     * The tile the {@code Player} currently resides on.
     */
    private Tile tile;
    /**
     * The unique player ID based on the {@link com.esotericsoftware.kryonet.Connection} of
     * the client to the server.
     */
    private int playerId;
    /**
     * The {@link Sprite} of this {@code Player} that represents the {@code Player}
     * in the live game visually.
     */
    private Sprite sprite;
    /**
     * The respective {@link com.badlogic.gdx.Input.Keys} that are bound to
     * {@link Runnable} methods defined in this class.
     */
    private AbstractInt2ObjectMap<Runnable> keyPressedBinds;
    private AbstractInt2ObjectMap<Runnable> keyUnpressedBinds;
    private Set<Flag> flags;

    /**
     * Makes a {@code Player} with its unique player ID generated by
     * the {@link com.esotericsoftware.kryonet.Connection} between the
     * client and the server.
     * @param playerId The unique player ID.
     */
    public Player(int playerId) {
        this.playerId = playerId;
        sprite = MoribundClient.getInstance().getSpriteDrawer().getSprite(SpriteFile.DUMMY_PLAYER);
        flags = new HashSet<>();
    }

    private void flag(Flag flag) {
        flags.add(flag);
    }

    private void unflag(Flag flag) {
        flags.remove(flag);
    }

    private void sendTilePacket() {
        val packetDispatcher = MoribundClient.getInstance().getPacketDispatcher();
        val tilePacket = new TilePacket(playerId, tile);
        packetDispatcher.sendTCP(tilePacket);
    }

    @Override
    public void bindKeysPressed() {
        keyPressedBinds.put(Input.Keys.UP, () -> flag(Flag.MOVE_UP));
        keyPressedBinds.put(Input.Keys.DOWN, () -> flag(Flag.MOVE_DOWN));
        keyPressedBinds.put(Input.Keys.RIGHT, () -> flag(Flag.MOVE_RIGHT));
        keyPressedBinds.put(Input.Keys.LEFT, () -> flag(Flag.MOVE_LEFT));
    }

    @Override
    public void bindKeysUnpressed() {
        keyUnpressedBinds.put(Input.Keys.UP, () -> {
            unflag(Flag.MOVE_UP);
            sendTilePacket();
        });
        keyUnpressedBinds.put(Input.Keys.DOWN, () -> {
            unflag(Flag.MOVE_DOWN);
            sendTilePacket();
        });
        keyUnpressedBinds.put(Input.Keys.RIGHT, () -> {
            unflag(Flag.MOVE_RIGHT);
            sendTilePacket();
        });
        keyUnpressedBinds.put(Input.Keys.LEFT, () -> {
            unflag(Flag.MOVE_LEFT);
            sendTilePacket();
        });
    }

    @Override
    public Tile getCurrentTile() {
        return tile;
    }

    @Override
    public void setTile(Tile tile) {
        this.tile = tile;
    }

    @Override
    public void draw(SpriteBatch spriteBatch) {
        sprite.setPosition(tile.getX(), tile.getY());
        sprite.draw(spriteBatch);
    }

    @Override
    public int getPlayerId() {
        return playerId;
    }

    @Override
    public AbstractInt2ObjectMap<Runnable> getKeyPressedBinds() {
        if (keyPressedBinds == null) {
            keyPressedBinds = new Int2ObjectOpenHashMap<>();
            bindKeysPressed();
        }
        return keyPressedBinds;
    }

    @Override
    public AbstractInt2ObjectMap<Runnable> getKeyUnpressedBinds() {
        if (keyUnpressedBinds == null) {
            keyUnpressedBinds = new Int2ObjectOpenHashMap<>();
            bindKeysUnpressed();
        }
        return keyUnpressedBinds;
    }

    @Override
    public Set<Flag> getFlags() {
        return flags;
    }

    @Override
    public void keyPressed(int keyPressed) {
        getKeyPressedBinds().get(keyPressed).run();
    }

    @Override
    public void keyUnpressed(int keyUnpressed) {
        getKeyUnpressedBinds().get(keyUnpressed).run();
    }

    @Override
    public boolean keyDown(int keycode) {
        if (getKeyPressedBinds().containsKey(keycode)) {
            val player = MoribundClient.getInstance().getPlayer();
            val packetDispatcher = MoribundClient.getInstance().getPacketDispatcher();
            val keyPressedPacket = new KeyPressedPacket(player.getPlayerId(), keycode);
            packetDispatcher.sendTCP(keyPressedPacket);
        }
        return true;
    }

    @Override
    public boolean keyUp(int keycode) {
        if (getKeyUnpressedBinds().containsKey(keycode)) {
            val player = MoribundClient.getInstance().getPlayer();
            val packetDispatcher = MoribundClient.getInstance().getPacketDispatcher();
            val keyUnpressedPacket = new KeyUnpressedPacket(player.getPlayerId(), keycode);
            packetDispatcher.sendTCP(keyUnpressedPacket);
        }
        return true;
    }

    @Override
    public boolean keyTyped(char character) {
        return false;
    }

    @Override
    public boolean touchDown(int screenX, int screenY, int pointer, int button) {
        return false;
    }

    @Override
    public boolean touchUp(int screenX, int screenY, int pointer, int button) {
        return false;
    }

    @Override
    public boolean touchDragged(int screenX, int screenY, int pointer) {
        return false;
    }

    @Override
    public boolean mouseMoved(int screenX, int screenY) {
        return false;
    }

    @Override
    public boolean scrolled(int amount) {
        return false;
    }
}