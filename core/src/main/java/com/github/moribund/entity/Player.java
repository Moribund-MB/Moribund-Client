package com.github.moribund.entity;

import com.badlogic.gdx.Input;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.github.moribund.MoribundClient;
import com.github.moribund.images.SpriteContainer;
import com.github.moribund.images.SpriteFile;
import com.github.moribund.net.packets.KeyPressedPacket;
import com.github.moribund.net.packets.KeyUnpressedPacket;
import com.github.moribund.net.packets.TilePacket;
import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import lombok.Getter;
import lombok.Setter;
import lombok.val;

import java.util.HashSet;
import java.util.Set;

/**
 * The {@code Player} that is being controlled by a client. The {@code Player}
 * is a type of {@link InputProcessor} for it is bound to {@link Player#keyBinds}.
 */
public class Player implements PlayableCharacter, InputProcessor {
    /**
     * The tile the {@code Player} currently resides on.
     */
    @Setter
    private Tile tile;
    /**
     * The unique player ID based on the {@link com.esotericsoftware.kryonet.Connection} of
     * the client to the server.
     */
    @Getter
    private int playerId;
    /**
     * The {@link Sprite} of this {@code Player} that represents the {@code Player}
     * in the live game visually.
     */
    private Sprite sprite;
    /**
     * The respective {@link com.badlogic.gdx.Input.Keys} that are bound to
     * {@link Runnable} methods defined in this class.
     */
    private AbstractInt2ObjectMap<PlayerAction> keyBinds;
    /**
     * The currently active {@link Flag}s on the {@code Player}.
     */
    @Getter
    private Set<Flag> flags;

    /**
     * Makes a {@code Player} with its unique player ID generated by
     * the {@link com.esotericsoftware.kryonet.Connection} between the
     * client and the server.
     * @param playerId The unique player ID.
     */
    public Player(int playerId) {
        this.playerId = playerId;
        sprite = SpriteContainer.getInstance().getSprite(SpriteFile.DUMMY_PLAYER);
        flags = new HashSet<>();
    }

    /**
     * Flags a new {@link Flag} on the player.
     * @param flag The {@link Flag} to flag.
     */
    private void flag(Flag flag) {
        flags.add(flag);
    }

    /**
     * Removes a {@link Flag} on the player.
     * @param flag The {@link Flag} that is not longer active.
     */
    private void unflag(Flag flag) {
        flags.remove(flag);
    }

    /**
     * Sends the current position of the {@code Player} to the
     * server so that positions can be updated server-sided.
     */
    private void sendTilePacket() {
        val packetDispatcher = MoribundClient.getInstance().getPacketDispatcher();
        val tilePacket = new TilePacket(playerId, tile);
        packetDispatcher.sendTCP(tilePacket);
    }

    @Override
    public void bindKeys() {
        keyBinds.put(Input.Keys.UP, new PlayerAction() {
            @Override
            public void keyPressed() {
                flag(Flag.MOVE_UP);
            }

            @Override
            public void keyUnpressed() {
                unflag(Flag.MOVE_UP);
                sendTilePacket();
            }
        });
        keyBinds.put(Input.Keys.DOWN, new PlayerAction() {
            @Override
            public void keyPressed() {
                flag(Flag.MOVE_DOWN);
            }

            @Override
            public void keyUnpressed() {
                unflag(Flag.MOVE_DOWN);
                sendTilePacket();
            }
        });
        keyBinds.put(Input.Keys.RIGHT, new PlayerAction() {
            @Override
            public void keyPressed() {
                flag(Flag.MOVE_RIGHT);
            }

            @Override
            public void keyUnpressed() {
                unflag(Flag.MOVE_RIGHT);
                sendTilePacket();
            }
        });
        keyBinds.put(Input.Keys.LEFT, new PlayerAction() {
            @Override
            public void keyPressed() {
                flag(Flag.MOVE_LEFT);
            }

            @Override
            public void keyUnpressed() {
                unflag(Flag.MOVE_LEFT);
                sendTilePacket();
            }
        });
    }

    @Override
    public Tile getCurrentTile() {
        return tile;
    }

    @Override
    public void draw(SpriteBatch spriteBatch) {
        sprite.setPosition(tile.getX(), tile.getY());
        sprite.draw(spriteBatch);
    }

    @Override
    public AbstractInt2ObjectMap<PlayerAction> getKeyBinds() {
        if (keyBinds == null) {
            keyBinds = new Int2ObjectOpenHashMap<>();
            bindKeys();
        }
        return keyBinds;
    }

    @Override
    public void keyPressed(int keyPressed) {
        getKeyBinds().get(keyPressed).keyPressed();
    }

    @Override
    public void keyUnpressed(int keyUnpressed) {
        getKeyBinds().get(keyUnpressed).keyUnpressed();
    }

    @Override
    public boolean keyDown(int keycode) {
        if (getKeyBinds().containsKey(keycode)) {
            val player = MoribundClient.getInstance().getPlayer();
            val packetDispatcher = MoribundClient.getInstance().getPacketDispatcher();
            val keyPressedPacket = new KeyPressedPacket(player.getPlayerId(), keycode);
            packetDispatcher.sendTCP(keyPressedPacket);
        }
        return true;
    }

    @Override
    public boolean keyUp(int keycode) {
        if (getKeyBinds().containsKey(keycode)) {
            val player = MoribundClient.getInstance().getPlayer();
            val packetDispatcher = MoribundClient.getInstance().getPacketDispatcher();
            val keyUnpressedPacket = new KeyUnpressedPacket(player.getPlayerId(), keycode);
            packetDispatcher.sendTCP(keyUnpressedPacket);
        }
        return true;
    }

    @Override
    public boolean keyTyped(char character) {
        return false;
    }

    @Override
    public boolean touchDown(int screenX, int screenY, int pointer, int button) {
        return false;
    }

    @Override
    public boolean touchUp(int screenX, int screenY, int pointer, int button) {
        return false;
    }

    @Override
    public boolean touchDragged(int screenX, int screenY, int pointer) {
        return false;
    }

    @Override
    public boolean mouseMoved(int screenX, int screenY) {
        return false;
    }

    @Override
    public boolean scrolled(int amount) {
        return false;
    }
}