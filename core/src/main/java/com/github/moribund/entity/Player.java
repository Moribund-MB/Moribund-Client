package com.github.moribund.entity;

import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.github.moribund.MoribundClient;
import com.github.moribund.images.SpriteFile;
import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;

import java.util.HashSet;
import java.util.Set;

/**
 * The {@code Player} that is being controlled by a client.
 */
public class Player implements PlayableCharacter {
    /**
     * The tile the {@code Player} currently resides on.
     */
    private Tile tile;
    /**
     * The unique player ID based on the {@link com.esotericsoftware.kryonet.Connection} of
     * the client to the server.
     */
    private int playerId;
    /**
     * The {@link Sprite} of this {@code Player} that represents the {@code Player}
     * in the live game visually.
     */
    private Sprite sprite;
    /**
     * The respective {@link com.badlogic.gdx.Input.Keys} that are bound to
     * {@link Runnable} methods defined in this class.
     */
    private AbstractInt2ObjectMap<Runnable> keyBinds;
    private Set<Flag> flags;

    /**
     * Makes a {@code Player} with its unique player ID generated by
     * the {@link com.esotericsoftware.kryonet.Connection} between the
     * client and the server.
     * @param playerId The unique player ID.
     */
    public Player(int playerId) {
        this.playerId = playerId;
        sprite = MoribundClient.getInstance().getSpriteDrawer().getSprite(SpriteFile.DUMMY_PLAYER);
        flags = new HashSet<>();
    }

    private void flagMoveUp() {
        flags.add(Flag.MOVE_UP);
    }

    private void flagMoveDown() {
        flags.add(Flag.MOVE_DOWN);
    }

    private void flagMoveLeft() {
        flags.add(Flag.MOVE_LEFT);
    }

    private void flagMoveRight() {
        flags.add(Flag.MOVE_RIGHT);
    }

    @Override
    public void bindKeys() {
        keyBinds.put(Input.Keys.UP, this::flagMoveUp);
        keyBinds.put(Input.Keys.DOWN, this::flagMoveDown);
        keyBinds.put(Input.Keys.RIGHT, this::flagMoveRight);
        keyBinds.put(Input.Keys.LEFT, this::flagMoveLeft);
    }

    @Override
    public Tile getCurrentTile() {
        return tile;
    }

    @Override
    public void setTile(Tile tile) {
        this.tile = tile;
    }

    @Override
    public void draw(SpriteBatch spriteBatch) {
        sprite.setPosition(tile.getX(), tile.getY());
        sprite.draw(spriteBatch);
    }

    @Override
    public int getPlayerId() {
        return playerId;
    }

    @Override
    public AbstractInt2ObjectMap<Runnable> getKeyBinds() {
        if (keyBinds == null) {
            keyBinds = new Int2ObjectOpenHashMap<>();
            bindKeys();
        }
        return keyBinds;
    }

    @Override
    public Set<Flag> getFlags() {
        return flags;
    }

    @Override
    public void keyPressed(int keyPressed) {
        keyBinds.get(keyPressed).run();
    }
}