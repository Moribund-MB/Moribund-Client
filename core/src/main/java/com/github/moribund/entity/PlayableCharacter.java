package com.github.moribund.entity;

import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.scenes.scene2d.Actor;
import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;

import java.util.Set;

/**
 * The {@code PlayableCharacter} interface is a template
 * for a character that can be interacted with by keys. All
 * playable characters are assumed as visible and movable.
 */
public abstract class PlayableCharacter extends Actor implements InputProcessor {
    static final int SPEED = 3;

    /**
     * Binds the keys to the {@code keyBinds} using the
     * {@link com.badlogic.gdx.Input.Keys} constants to delegate
     * {@link Runnable} actions.
     */
    public abstract void bindKeys();

    /**
     * Gets the current {@link Tile} the player is on.
     * @return The {@link Tile} the player is on.
     */
    public abstract Tile getCurrentTile();

    /**
     * Sets a new {@link Tile} for the player to now currently be on.
     * @param tile The new {@link Tile} for the player.
     */
    public abstract void setTile(Tile tile);

    /**
     * Draws the player onto the screen.
     * @param spriteBatch The {@link SpriteBatch} to draw the {@code PlayableCharacter}'s
     *                    {@link com.badlogic.gdx.graphics.g2d.Sprite} to.
     */
    public abstract void draw(SpriteBatch spriteBatch);

    /**
     * Gets the player's unique ID generated by the connection.
     * @return The Player's unique ID.
     */
    public abstract int getPlayerId();

    /**
     * Gets the respective {@link PlayerAction} for the
     * {@link com.badlogic.gdx.Input.Keys} value pressed.
     * @return The key binds defined by {@link PlayableCharacter#bindKeys()}.
     */
    public abstract AbstractInt2ObjectMap<PlayerAction> getKeyBinds();

    /**
     * Gets the current active {@link Flag}s on the {@code PlayableCharacter}.
     * @return The current active {@link Flag}s.
     */
    public abstract Set<Flag> getFlags();

    /**
     * Handles the key being pressed by a player after it has gone through
     * client-server latency.
     * @param keyPressed The {@link com.badlogic.gdx.Input.Keys} value that was
     *                   pressed.
     */
    public abstract void keyPressed(int keyPressed);

    /**
     * Handles the key being lifted by a player after it has gone through
     * client-server latency.
     * @param keyUnpressed The {@link com.badlogic.gdx.Input.Keys} value that
     *                     was lifted.
     */
    public abstract void keyUnpressed(int keyUnpressed);
}